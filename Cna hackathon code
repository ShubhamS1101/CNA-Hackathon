{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8702303,"sourceType":"datasetVersion","datasetId":5219382}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-26T15:09:11.101727Z","iopub.execute_input":"2024-06-26T15:09:11.102932Z","iopub.status.idle":"2024-06-26T15:09:11.152074Z","shell.execute_reply.started":"2024-06-26T15:09:11.102869Z","shell.execute_reply":"2024-06-26T15:09:11.150428Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"/kaggle/input/cnadata/training_set_features.csv\n/kaggle/input/cnadata/test_set_features.csv\n/kaggle/input/cnadata/training_set_labels.csv\n/kaggle/input/cnadata/submission_format.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","metadata":{"execution":{"iopub.status.busy":"2024-06-26T15:09:11.154286Z","iopub.execute_input":"2024-06-26T15:09:11.154658Z","iopub.status.idle":"2024-06-26T15:09:11.161138Z","shell.execute_reply.started":"2024-06-26T15:09:11.154627Z","shell.execute_reply":"2024-06-26T15:09:11.159702Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"df1= pd.read_csv(\"/kaggle/input/cnadata/submission_format.csv\")\ndf2= pd.read_csv(\"/kaggle/input/cnadata/test_set_features.csv\")\ndf3= pd.read_csv(\"/kaggle/input/cnadata/training_set_features.csv\")\ndf4= pd.read_csv(\"/kaggle/input/cnadata/training_set_labels.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-26T15:09:11.162992Z","iopub.execute_input":"2024-06-26T15:09:11.163436Z","iopub.status.idle":"2024-06-26T15:09:11.461324Z","shell.execute_reply.started":"2024-06-26T15:09:11.163394Z","shell.execute_reply":"2024-06-26T15:09:11.460166Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_columns', None)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-26T15:09:11.463146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df1.head(50)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\ndf3.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df4.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df4.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3 = pd.merge(df3, df4, on='respondent_id', how='left')\ndf2 = pd.merge(df2, df1, on='respondent_id', how='left')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_xyz_t = df2['h1n1_vaccine']\ny_seasonal_t = df2['seasonal_vaccine']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3['education'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3['education']=df3['education'].fillna('Other')\ndf2['education']=df2['education'].fillna('Other')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3['income_poverty'].value_counts()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3['xyz_concern']= df3['xyz_concern'].fillna(2.0)\ndf3['xyz_knowledge']=df3['xyz_knowledge'].fillna(1.0)\ndf2['xyz_concern']= df2['xyz_concern'].fillna(2.0)\ndf2['xyz_knowledge']=df2['xyz_knowledge'].fillna(1.0)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"behavioral_columns = df3.columns[df3.columns.str.startswith('behavioral')]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def handle(row):\n    for col in row.index:\n        if col in behavioral_columns and pd.isna(row[col]):\n            cnt = row[behavioral_columns].notnull().sum()\n            num_non_null = row[behavioral_columns].notnull().count()\n            if cnt  >= num_non_null/2:\n                row[col] = 1\n            else:\n                row[col] = 0\n    return row\n\n# Apply handle function using apply along axis=1\ndf3 = df3.apply(handle, axis=1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"behavioral_columns1 = df2.columns[df2.columns.str.startswith('behavioral')]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"def handle1(row):\n    for col in row.index:\n        if col in behavioral_columns and pd.isna(row[col]):\n            cnt = row[behavioral_columns].notnull().sum()\n            num_non_null = row[behavioral_columns].notnull().count()\n            if cnt  >= num_non_null/2:\n                row[col] = 1\n            else:\n                row[col] = 0\n    return row\n\n\n# Apply handle function using apply along axis=1\ndf2 = df2.apply(handle1, axis=1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3= df3.drop(columns=['employment_occupation','employment_industry','hhs_geo_region'])\ndf2= df2.drop(columns=['employment_occupation','employment_industry','hhs_geo_region'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"LE = LabelEncoder()\ndf3['census_msa'] = LE.fit_transform(df3['census_msa'])\ndf3['age_group'] = LE.fit_transform(df3['age_group'])\ndf3['education'] = LE.fit_transform(df3['education'])\ndf3['income_poverty'] = LE.fit_transform(df3['income_poverty'])\ndf3['sex'] = LE.fit_transform(df3['sex'])\ndf3['marital_status'] = LE.fit_transform(df3['marital_status'])\ndf3['rent_or_own'] = LE.fit_transform(df3['rent_or_own'])\ndf3['household_adults'] = LE.fit_transform(df3['household_adults'])\ndf3['household_children'] = LE.fit_transform(df3['household_children'])\ndf3['race'] = LE.fit_transform(df3['race'])\ndf3['employment_status'] = LE.fit_transform(df3['employment_status'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ndf2['census_msa'] = LE.fit_transform(df2['census_msa'])\ndf2['age_group'] = LE.fit_transform(df2['age_group'])\ndf2['education'] = LE.fit_transform(df2['education'])\ndf2['income_poverty'] = LE.fit_transform(df2['income_poverty'])\ndf2['sex'] = LE.fit_transform(df2['sex'])\ndf2['marital_status'] = LE.fit_transform(df2['marital_status'])\ndf2['rent_or_own'] = LE.fit_transform(df2['rent_or_own'])\ndf2['household_adults'] = LE.fit_transform(df2['household_adults'])\ndf2['household_children'] = LE.fit_transform(df2['household_children'])\ndf2['race'] = LE.fit_transform(df2['race'])\ndf2['employment_status'] = LE.fit_transform(df2['employment_status'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3['doctor_recc_xyz']= df3['doctor_recc_xyz'].fillna(0.0)\ndf3['doctor_recc_seasonal']= df3['doctor_recc_seasonal'].fillna(0.0)\n\ndf3['chronic_med_condition']= df3['chronic_med_condition'].fillna(0.0)\ndf3['child_under_6_months']= df3['child_under_6_months'].fillna(0.0)\ndf3['health_worker']= df3['health_worker'].fillna(0.0)\ndf3['health_insurance']= df3['health_insurance'].fillna(1.0)\ndf3['opinion_xyz_vacc_effective']= df3['opinion_xyz_vacc_effective'].fillna(4.0)\ndf3['opinion_xyz_risk']= df3['opinion_xyz_risk'].fillna(2.0)\ndf3['opinion_xyz_sick_from_vacc']= df3['opinion_xyz_sick_from_vacc'].fillna(2.0)\ndf3['opinion_seas_vacc_effective']= df3['opinion_seas_vacc_effective'].fillna(4.0)\ndf3['opinion_seas_risk']= df3['opinion_seas_risk'].fillna(3.0)\ndf3['opinion_seas_sick_from_vacc']= df3['opinion_seas_sick_from_vacc'].fillna(2.0)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2.describe()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df2['doctor_recc_xyz'] = df2['doctor_recc_xyz'].fillna(0.0)\ndf2['doctor_recc_seasonal'] = df2['doctor_recc_seasonal'].fillna(0.0)\n\ndf2['chronic_med_condition'] = df2['chronic_med_condition'].fillna(0.0)\ndf2['child_under_6_months'] = df2['child_under_6_months'].fillna(0.0)\ndf2['health_worker'] = df2['health_worker'].fillna(0.0)\ndf2['health_insurance'] = df2['health_insurance'].fillna(1.0)\ndf2['opinion_xyz_vacc_effective'] = df2['opinion_xyz_vacc_effective'].fillna(4.0)\ndf2['opinion_xyz_risk'] = df2['opinion_xyz_risk'].fillna(2.0)\ndf2['opinion_xyz_sick_from_vacc'] = df2['opinion_xyz_sick_from_vacc'].fillna(2.0)\ndf2['opinion_seas_vacc_effective'] = df2['opinion_seas_vacc_effective'].fillna(4.0)\ndf2['opinion_seas_risk'] = df2['opinion_seas_risk'].fillna(2.0)\ndf2['opinion_seas_sick_from_vacc'] = df2['opinion_seas_sick_from_vacc'].fillna(2.0)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df3.columns","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nX_xyz= df3[['xyz_concern', 'xyz_knowledge',\n       'behavioral_antiviral_meds', 'behavioral_avoidance',\n       'behavioral_face_mask', 'behavioral_wash_hands',\n       'behavioral_large_gatherings', 'behavioral_outside_home',\n       'behavioral_touch_face', 'doctor_recc_xyz',\n       'chronic_med_condition', 'child_under_6_months', 'health_worker',\n       'health_insurance', 'opinion_xyz_vacc_effective', 'opinion_xyz_risk',\n       'opinion_xyz_sick_from_vacc', 'age_group',\n       'education', 'race', 'sex', 'income_poverty', 'marital_status',\n       'rent_or_own', 'employment_status', 'census_msa',\n       'household_adults', 'household_children' ]]\nX_s= df3[[\n       'behavioral_antiviral_meds', 'behavioral_avoidance',\n       'behavioral_face_mask', 'behavioral_wash_hands',\n       'behavioral_large_gatherings', 'behavioral_outside_home',\n       'behavioral_touch_face', 'doctor_recc_seasonal',\n       'chronic_med_condition', 'child_under_6_months', 'health_worker',\n       'health_insurance',  'age_group','opinion_seas_vacc_effective',\n       'opinion_seas_risk', 'opinion_seas_sick_from_vacc',\n       'education', 'race', 'sex', 'income_poverty', 'marital_status',\n       'rent_or_own', 'employment_status', 'census_msa',\n       'household_adults', 'household_children' ]]\ny_xyz = df3['xyz_vaccine']\ny_seasonal = df3['seasonal_vaccine']","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_xyz_t= df2[['xyz_concern', 'xyz_knowledge',\n       'behavioral_antiviral_meds', 'behavioral_avoidance',\n       'behavioral_face_mask', 'behavioral_wash_hands',\n       'behavioral_large_gatherings', 'behavioral_outside_home',\n       'behavioral_touch_face', 'doctor_recc_xyz',\n       'chronic_med_condition', 'child_under_6_months', 'health_worker',\n       'health_insurance', 'opinion_xyz_vacc_effective', 'opinion_xyz_risk',\n       'opinion_xyz_sick_from_vacc', 'age_group',\n       'education', 'race', 'sex', 'income_poverty', 'marital_status',\n       'rent_or_own', 'employment_status', 'census_msa',\n       'household_adults', 'household_children' ]]\nX_s_t= df2[[\n       'behavioral_antiviral_meds', 'behavioral_avoidance',\n       'behavioral_face_mask', 'behavioral_wash_hands',\n       'behavioral_large_gatherings', 'behavioral_outside_home',\n       'behavioral_touch_face', 'doctor_recc_seasonal',\n       'chronic_med_condition', 'child_under_6_months', 'health_worker',\n       'health_insurance',  'age_group','opinion_seas_vacc_effective',\n       'opinion_seas_risk', 'opinion_seas_sick_from_vacc',\n       'education', 'race', 'sex', 'income_poverty', 'marital_status',\n       'rent_or_own', 'employment_status', 'census_msa',\n       'household_adults', 'household_children' ]]\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_xyz = LogisticRegression(max_iter=1000)\nmodel_seasonal = LogisticRegression(max_iter=1000)\n\nmodel_xyz.fit(X_xyz, y_xyz)\nmodel_seasonal.fit(X_s, y_seasonal)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_proba_xyz = model_xyz.predict_proba(X_xyz_t)[:, 1]  # Probabilities for class 1 (xyz_vaccine)\npred_proba_seasonal = model_seasonal.predict_proba(X_s_t)[:, 1]  # Probabilities for class 1 (seasonal_vaccine)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_proba_xyz","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pred_proba_xyz = pred_proba_xyz.round(1)\npred_proba_seasonal = pred_proba_seasonal.round(1)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_df = pd.DataFrame({\n    'respondent_id': df2['respondent_id'], \n    'xyz_vaccine': pred_proba_xyz,\n    'seasonal_vaccine': pred_proba_seasonal\n})","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_df.to_csv('result_predictions.csv', index=False)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df1.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"threshold = 0.5\ndf1['h1n1_vaccine'] = df1['h1n1_vaccine'].apply(lambda x: 1 if x > threshold else 0)\ndf1['seasonal_vaccine'] = df1['seasonal_vaccine'].apply(lambda x: 1 if x > threshold else 0)\n#result_df['xyz_vaccine'] = result_df['xyz_vaccine'].apply(lambda x: 1 if x > threshold else 0)\n#result_df['seasonal_vaccine'] = result_df['seasonal_vaccine'].apply(lambda x: 1 if x > threshold else 0)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df1.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score\nroc_auc_seasonal = roc_auc_score(df1['h1n1_vaccine'], result_df['xyz_vaccine'])","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\nfrom sklearn.metrics import roc_auc_score\n\n# Extract the true labels and predicted probabilities\ntrue_labels_xyz = merged_df['h1n1_vaccine']\npredicted_probs_xyz = merged_df['xyz_vaccine']\n\n\n\n# Calculate ROC AUC scores\nroc_auc_xyz = roc_auc_score(true_labels_xyz, predicted_probs_xyz)\nroc_aic_xyz\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}